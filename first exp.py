# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JxjY4w2szLaQtMFtIdtKyHtnixz7jTvW
"""

def check_number(num):
    if num > 0:
        print(f"{num} is a positive number.")
    elif num == 0:
        print(f"{num} is zero.")
    else:
        print(f"{num} is a negative number.")


def print_numbers_for_loop(limit):
    print("Printing numbers using a for loop:")
    for i in range(limit):
        print(i, end=" ")



def print_numbers_while_loop(limit):
    print("Printing numbers using a while loop:")
    i = 0
    while i < limit:
        print(i, end = " ")
        i += 1


def loop_with_break(limit):
    print("Loop with break statement:")
    for i in range(limit):
        if i == 5:
            print("Breaking out of the loop at i =", i)
            break
        print(i, end=" ")


check_number(10)
check_number(-5)
check_number(0)

print_numbers_for_loop(5)
print()
print_numbers_while_loop(5)
print()
loop_with_break(10)

class Animal:
  def __init__(self, name, age):
    self.__name = name
    self.age = age

  def get_name(self):
    return self.__name

  def set_name(self, name):
    self.__name = name

  def display(self):
    print(f"Animal name: {self.__name}, Age:{self.age}")

class Dog(Animal):
  def __init__(self, name, age, breed):
     super().__init__(name, age)
     self.breed = breed

  def display(self):
    print(f"Name:{self.get_name()}, Age:{self.age}, Breed:{self.breed}")

  def speak(self, sound="woof"):
    print(f"Dog sound:{sound}")



animal = Animal("rocky", 5)
animal.display()
print()
dog = Dog("buddy", 3, "german")
dog.display()
dog.speak()

import numpy as np


array1 = np.array([1, 2, 3, 4, 5])
array2 = np.array([6, 7, 8, 9, 10])

print("Array1:", array1)
print("Array2:", array2)


sum_array = np.add(array1, array2)
print("\nSum of Array1 and Array2:", sum_array)

product_array = np.multiply(array1, array2)
print("Product of Array1 and Array2:", product_array)


reshaped_array = array1.reshape((5, 1))
print("\nReshaped Array1 to (5,1):\n", reshaped_array)


sqrt_array = np.sqrt(array1)
print("\nSquare root of Array1:", sqrt_array)

log_array = np.log(array1)
print("Natural logarithm of Array1:", log_array)


mean_value = np.mean(array1)
print("\nMean of Array1:", mean_value)

std_dev = np.std(array1)
print("Standard Deviation of Array1:", std_dev)


concatenated_array = np.concatenate([array1, array2])
print("\nConcatenated Array1 and Array2:", concatenated_array)


slice_array = array1[1:4]
print("\nSliced Array1 (from index 1 to 3):", slice_array)


array3 = np.array([[1], [2], [3], [4], [5]])  # 5x1 array
broadcasted_sum = array3 + array1
print("\nBroadcasting Array1 to add with Array3:\n", broadcasted_sum)


zeros_array = np.zeros((3, 3))
print("\n3x3 Zeros Array:\n", zeros_array)

ones_array = np.ones((2, 4))
print("\n2x4 Ones Array:\n", ones_array)

identity_matrix = np.eye(3)
print("\n3x3 Identity Matrix:\n", identity_matrix)


random_array = np.random.random((2, 3))
print("\nRandom 2x3 Array:\n", random_array)


greater_than_five = np.greater(array2, 5)
print("\nElements in Array2 greater than 5:", greater_than_five)


sorted_array = np.sort(array2)
print("\nSorted Array2:", sorted_array)

import pandas as pd
import numpy as np

# 1. Creating a DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Age': [24, 27, 22, 32, 29],
    'City': ['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix'],
    'Salary': [70000, 80000, np.nan, 60000, 75000]
}

df = pd.DataFrame(data)

print("Original DataFrame:\n", df)


print("\nDataFrame Info:")
print(df.info())


print("\nDescriptive Statistics (Summary):")
print(df.describe())


df['Salary'] = df['Salary'].fillna(df['Salary'].mean())
print("\nDataFrame after filling missing values:\n", df)


ages = df['Age']
print("\nAges Column:\n", ages)


filtered_df = df[df['Age'] > 25]
print("\nFiltered DataFrame (Age > 25):\n", filtered_df)


sorted_df = df.sort_values(by='Age')
print("\nDataFrame Sorted by Age:\n", sorted_df)


grouped_df = df.groupby('City')['Salary'].mean()
print("\nAverage Salary Grouped by City:\n", grouped_df)


df['Age Group'] = ['Young' if x < 30 else 'Mature' for x in df['Age']]
print("\nDataFrame with New 'Age Group' Column:\n", df)


df['Salary'] = df['Salary'].apply(lambda x: x * 1.1)
print("\nDataFrame after applying 10% salary raise:\n", df)


df = df.drop(columns=['Age Group'])
print("\nDataFrame after Dropping 'Age Group' Column:\n", df)


data2 = {
    'Name': ['Alice', 'Bob', 'Charlie', 'David', 'Eve'],
    'Department': ['HR', 'Finance', 'Engineering', 'Marketing', 'IT']
}

df2 = pd.DataFrame(data2)

merged_df = pd.merge(df, df2, on='Name', how='left')
print("\nMerged DataFrame with Department Information:\n", merged_df)


pivot_table = pd.pivot_table(df, values='Salary', index='City', aggfunc=np.mean)
print("\nPivot Table - Average Salary by City:\n", pivot_table)


df.rename(columns={'Salary': 'Annual Salary'}, inplace=True)
print("\nDataFrame with Renamed Columns:\n", df)

with open('example.txt', 'w') as file:
    file.write("Hello, this is a test file.\n")
    file.write("We are learning file handling in Python.\n")
    file.write("Python file handling is simple and powerful.\n")

print("Data written to file 'example.txt'.")


with open('example.txt', 'a') as file:
    file.write("This line is added using append mode.\n")

print("Data appended to file 'example.txt'.")


print("\nReading the entire content of 'example.txt':")
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)


print("\nReading the file line by line:")
with open('example.txt', 'r') as file:
    for line in file:
        print(line.strip())


print("\nReading the first 10 characters of the file:")
with open('example.txt', 'r') as file:
    first_10_chars = file.read(10)
    print(first_10_chars)


print("\nUsing seek() and tell() to navigate within the file:")
with open('example.txt', 'r') as file:
    file.seek(15)
    print(file.tell())
    content_from_position = file.read(10)
    print(f"Content from position 15: {content_from_position}")


try:
    with open('new_example.txt', 'x') as file:
        file.write("This is a newly created file.\n")
        file.write("It will not overwrite an existing file.\n")
    print("New file 'new_example.txt' created and data written.")
except FileExistsError:
    print("Error: 'new_example.txt' already exists, file not created.")


file = open('example.txt', 'r')
print("\nReading file before closing manually:")
print(file.read())
file.close()
print("File closed manually.")

